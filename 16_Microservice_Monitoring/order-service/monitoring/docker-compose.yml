version: '3.7'

services:
  message-server:
    build: '../'
    container_name: order-service
    image: order-service:latest
    ports:
      - 8080:8080
    networks:
      - app-network
    depends_on:
      - psql
  grafana:
    container_name: grafana
    image: grafana/grafana
    ports:
      - 3000:3000
    volumes:
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    restart: unless-stopped
    networks:
      - app-network
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app-network
  psql:
    image: postgres:latest
    container_name: server_psql
    ports:
      - 5432:5432
    restart: on-failure
    environment:
      POSTGRES_USER: order_user
      POSTGRES_PASSWORD: order_password
      POSTGRES_DB: order_db
    volumes:
      - database-data:/var/lib/postgresql/data/
    networks:
      - app-network

  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    restart: on-failure
    networks:
      - app-network

  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    container_name: kafka
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "order:4:1"
    volumes:
      - kafka:/data
    restart: on-failure
    networks:
      - app-network

networks:
  app-network:
    name: app-network
    driver: bridge

volumes:
  database-data:
  kafka: